##341. 扁平化嵌套列表迭代器## </br>
一开始的想法就是init的时候直接dfs+list储存下来，但这个不叫迭代器，需要在取数的过程中进行判断与更新
```python
class NestedIterator:
    def __init__(self, nestedList: [NestedInteger]):
        self.recordList = []
        self.cur = 0
        self.buildList(nestedList)

    def buildList(self, nestedList):
        n = len(nestedList)
        for i in range(n):
            if nestedList[i].isInteger():
                self.recordList.append(nestedList[i])
            else:
                self.buildList(nestedList[i].getList())
    
    def next(self) -> int:
        if self.hasNext:
            res = self.recordList[self.cur]
            self.cur += 1
            return res
            
    
    def hasNext(self) -> bool:
        if self.cur < len(self.recordList):
            return True
        else:
            return False
```
真正的迭代器用stack储存数组，然后不断检查顶部元素，直至顶部元素为一个整数为止，这个题很有意思
```python
class NestedIterator:
    def __init__(self, nestedList: [NestedInteger]):
        self.stack = []
        for i in range(len(nestedList) - 1, -1, -1):
            self.stack.append(nestedList[i])
    
    def next(self) -> int:
        cur = self.stack.pop()
        return cur.getInteger()
            
    def hasNext(self) -> bool:
        while self.stack:
            cur = self.stack[-1]
            if cur.isInteger():
                return True
            else:
                self.stack.pop()
                for i in range(len(cur.getList()) - 1, -1, -1):
                    self.stack.append(cur.getList()[i])
        return False
```
